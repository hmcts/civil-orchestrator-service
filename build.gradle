import org.gradle.api.Task
import org.gradle.api.tasks.Exec

plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.springframework.boot' version '3.1.2'
  id 'org.owasp.dependencycheck' version '8.3.1'
  id 'com.github.ben-manes.versions' version '0.47.0'
  id 'org.sonarqube' version '4.2.1.3168'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

jacoco {
  toolVersion = '0.8.10' // jacocoMavenPluginVersion
  reportsDirectory = file("$buildDir/reports/jacoco")
}


sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

def inStrictOrder(Task... tasks) {
  for (int i = 0; i < tasks.size() - 1; i++) {
    tasks[i + 1].mustRunAfter(tasks[i])
  }
  return tasks
}

task awaitApplicationReadiness(type: Exec, description: 'Awaits until application is ready.') {
  commandLine './bin/wait-for.sh'
}

task runApiTests(type: Exec, description: 'Runs Api tests.') {
  // temporarily adding test unspec until we add our tests
  commandLine '/usr/bin/yarn', '--silent', 'run', 'test:api-unspec'
}

task runSmokeTests(type: Exec, description: 'Runs smoke tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'run', 'test:smoke'
}

task smoke(description: 'Runs the smoke tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, runSmokeTests))
}

task functional(description: 'Runs the functional tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, runApiTests))
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.12.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}


project.tasks['sonarqube'].dependsOn test,jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: civil-orchestrator-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:civil-orchestrator-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.coverage.exclusions", "**/model/**, **/config/**/*Configuration.java, **/testingsupport/**, **/*ExternalTaskListener.java, **/stereotypes/**, **/*Exception.java"
    property "sonar.cpd.exclusions", "**/*DocumentManagementService.java"
    property "sonar.host.url", "https://sonar.reform.hmcts.net/"
  }
}

jacocoTestReport {
  executionData(test, integration)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
  subprojects.each {
    sourceSets it.sourceSets.main
  }
  reports {
    xml {
        enabled true
      }
    csv {
      enabled false
    }
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

jacocoTestReport.dependsOn {
  subprojects*.test
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "https://jitpack.io"
  }
  maven {
    url  "https://repo.spring.io/libs-milestone"
  }
  maven {
    url "https://jitpack.io"
  }
  jcenter()
}

ext {
  log4JVersion = "2.20.0"
}

ext['snakeyaml.version'] = '2.0'

ext {
  mapstructVersion = '1.5.3.Final'
  lombokVersion = '1.18.28'
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'

  implementation 'com.github.hmcts:payments-java-client:1.6.4'
  implementation 'javax.ws.rs:jsr311-api:1.1.1'
  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
  implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.0'
  implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.3'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.3.1'
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'com.google.guava', name: 'guava', version: '32.0.1-jre'
  implementation group: 'org.json', name: 'json', version: '20230227'
  implementation group: 'com.fasterxml.woodstox', name: 'woodstox-core', version: '6.5.1'
  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.2.1'

  testImplementation(platform('org.junit:junit-bom:5.9.3'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.6'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-openfeign-core', version: '3.1.6'

  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.9.2'

  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  implementation "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

}

mainClassName = 'uk.gov.hmcts.reform.civil.Application'

bootJar {
  archiveFileName = "civil-orchestrator-service.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
